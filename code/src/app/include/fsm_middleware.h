/******************************************************************************
Finite State Machine
Project: ../../assets/gv_fsm/_fsm_middleware.dot
Description: fsm_middleware

Generated by gv_fsm ruby gem, see https://rubygems.org/gems/gv_fsm
gv_fsm version 0.3.7
Generation date: 2024-09-22 19:51:29 +0200
Generated from: ../../assets/gv_fsm/_fsm_middleware.dot
The finite state machine has:
  5 states
  3 transition functions
******************************************************************************/

#ifndef _FSM_MIDDLEWARE_H
#define _FSM_MIDDLEWARE_H
#ifdef __cplusplus
extern "C" {
#endif
#include <stdlib.h>

/*** USER CODE BEGIN INCLUDE ***/
#include "buffer.h"
#include "trajectory_generator.h"
#include "inverse_geometry.h"
#include "gcode.h"
#include "robot.h"
/*** USER CODE END INCLUDE ***/


/*** USER CODE BEGIN DEFINE ***/
#define RETCHECK(fn, state)     \
{                               \
    if ((fn < 0))               \
      next_state = STATE_FATAL; \
    else                        \
      next_state = state;       \
}
/*** USER CODE END DEFINE ***/



// State data object
// By default set to void; override this typedef or load the proper
// header if you need
typedef void state_data_t;

// NOTHING SHALL BE CHANGED AFTER THIS LINE!

// List of states
typedef enum {
  STATE_INIT = 0,  
  STATE_CONSUME,  
  STATE_COMPUTE,  
  STATE_PRODUCE,  
  STATE_FATAL,  
  NUM_STATES,
  NO_CHANGE
} state_t;

// State human-readable names
extern const char *state_names[];

// State function and state transition prototypes
typedef state_t state_func_t(state_data_t *data);
typedef void transition_func_t(state_data_t *data);

// State functions

// Function to be executed in state init
// valid return states: STATE_CONSUME
state_t do_init(state_data_t *data);

// Function to be executed in state consume
// valid return states: NO_CHANGE, STATE_CONSUME, STATE_COMPUTE, STATE_PRODUCE
state_t do_consume(state_data_t *data);

// Function to be executed in state compute
// valid return states: STATE_PRODUCE, STATE_FATAL
state_t do_compute(state_data_t *data);

// Function to be executed in state produce
// valid return states: NO_CHANGE, STATE_CONSUME, STATE_COMPUTE, STATE_PRODUCE
state_t do_produce(state_data_t *data);

// Function to be executed in state fatal
// valid return states: NO_CHANGE
state_t do_fatal(state_data_t *data);


// List of state functions
extern state_func_t *const state_table[NUM_STATES];


// Transition functions
void set_next_trajectory(state_data_t *data);
void get_via_point(state_data_t *data);
void handle_fatal_error(state_data_t *data);

// Table of transition functions
extern transition_func_t *const transition_table[NUM_STATES][NUM_STATES];

// state manager
state_t run_middleware(state_t cur_state, state_data_t *data);

#ifdef __cplusplus
}
#endif
#endif // _FSM_MIDDLEWARE_H
